/**
 * @fileOverview 
 */
package (
    Pattern
    
    IdentifierPattern
    EllipsisPattern
    SinkPattern
    ImportPattern
    ArrayPattern
    ObjectPatternElement
    ObjectPattern
    ArgumentsPattern
    SubPattern
    AsPattern)
with 
    import 'khepri_ast/node' {defineNode Node}
in {

/* Base
 ******************************************************************************/
/**
 * @constructor
 */
Pattern = function \loc -> {
    Node.call(this, loc);
};
Pattern.prototype = new Node;

/* Instances
 ******************************************************************************/
/**
 * @constructor
 */
IdentifierPattern = defineNode(Pattern, 'IdentifierPattern',
    ['id'],
    [],
    function \loc, id -> {
        Pattern.call(this, loc);
        this.id = id;
    });

/**
 * @constructor
 */
EllipsisPattern = defineNode(Pattern, 'EllipsisPattern',
    [],
    ['id'],
    function \loc, id -> {
        Pattern.call(this, loc);
        this.id = (id || null);
    });

/**
 * @constructor
 */
SinkPattern = defineNode(Pattern, 'SinkPattern',
    [],
    [],
    function \loc -> {
        Pattern.call(this, loc);
    });

/**
 * @constructor
 */
ImportPattern = defineNode(Node, 'ImportPattern',
    ['from', 'pattern'],
    [],
    function \loc, from, pattern -> {
        Node.call(this, loc);
        this.from = from;
        this.pattern = pattern;
    });

/**
 * @constructor
 */
ArrayPattern = defineNode(Pattern, 'ArrayPattern',
    ['elements'],
    [],
    function \loc, elements -> {
        Pattern.call(this, loc);
        this.elements = elements;
    });

/**
 * @constructor
 */
ObjectPatternElement = defineNode(Pattern, 'ObjectPatternElement',
    ['key', 'target'],
    [],
    function \loc, key, target -> {
        Pattern.call(this, loc);
        this.key = key;
        this.target = (target || null);
    });

/**
 * @constructor
 */
ObjectPattern = defineNode(Pattern, 'ObjectPattern',
    ['elements'],
    [],
    function \loc, elements -> {
        Pattern.call(this, loc);
        this.elements = elements;
    });

/**
 * @constructor
 */
AsPattern = defineNode(Pattern, 'AsPattern',
    ['id', 'target'],
    [],
    function \loc, id, target -> {
        Pattern.call(this, loc);
        this.id = id;
        this.target = target;
    });

/**
 * @constructor
 */
SubPattern = defineNode(Pattern, 'SubPattern',
    ['id', 'elements'],
    [],
    function \loc, id, elements -> {
        Pattern.call(this, loc);
        this.id = id;
        this.elements = elements;
    });

/**
 * @constructor
 */
ArgumentsPattern = defineNode(Pattern, 'ArgumentsPattern',
    ['id', 'elements', 'self'],
    [],
    function \loc, id, elements, self -> {
        Pattern.call(this, loc);
        this.id = id;
        this.elements = elements;
        this.self = self;
    });

}