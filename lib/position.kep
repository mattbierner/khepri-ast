/**
 * @fileOverview Data structures that track locations in Khepri source.
 */
package (
    SourcePosition
    SourceLocation)
{

// SourcePosition
////////////////////////////////////////
/**
 * Point in source code.
 * 
 * @member line Line number.
 * @member column Coliumn number.
 * @member [file] File name.
 */
SourcePosition = function \line column file =self-> {
    self.line = line;
    self.column = column;
    self.file = file;
};

/**
 * Initial SourcePosition in a stream.
 */
SourcePosition.initial = new SourcePosition(1, 0);

SourcePosition.prototype.increment = \tok =self->
    ?tok === '\n'
        :new SourcePosition(self.line + 1, 0)
        :new SourcePosition(self.line, self.column + 1);

SourcePosition.prototype.toString = \ =self->
    "{line:" + self.line + " col:" + self.column + "}";

SourcePosition.prototype.compare = \pos =self->
    ?self.line === pos.line
        :self.column - pos.column
        :self.line - pos.line;

// SourceLocation
////////////////////////////////////////
/**
 * Location in source code between two positions.
 *
 * @member start Start `SourcePosition`.
 * @member start End `SourcePosition`
 * @member [file] File name.
 */
SourceLocation = function \start end file =self-> {
    self.start = start;
    self.end = end;
    self.file = file;
};

SourceLocation.prototype.toString = \ =self->
    '{'+
    (?self.file
        :'file:' + self.file + ' '
        :'') +
    'start:' + self.start +
    ' end:' + self.end +
    '}';

/**
 * Merge two source locations in a single file into a new source location
 * that spans the two.
 */
SourceLocation.merge = \s1 s2 ->
    new SourceLocation(
        ?s1.start.compare(s2.start) > 0 : s2.start : s1.start,
        ?s1.end.compare(s2.end) > 0 : s1.end : s2.end,
        s1.file || s2.file);

}