/**
 * @fileOverview Khepri declaration AST nodes.
 */
package (
    Declaration
    
    VariableDeclaration
    VariableDeclarator
    
    Binding
    
    StaticDeclaration
    StaticDeclarator)
with
    import './node' {defineNode Node}
in {

/* Base
 ******************************************************************************/
/**
 * @constructor
 */
Declaration = function \() -> { };
Declaration.prototype = new Node();

/* Instances
 ******************************************************************************/
/**
 * @constructor
 */
VariableDeclaration = defineNode(Declaration, 'VariableDeclaration',
    ['declarations'],
    [],
    function \loc, declarations =self-> {
        Node.call(self, loc);
        self.declarations = declarations;
    });

/**
 * @constructor
 */
VariableDeclarator = defineNode(Declaration, 'VariableDeclarator',
    ['id', 'init'],
    ['immutable', 'recursive'],
    function \loc, id, init, immutable, recursive =self-> {
        Node.call(self, loc);
        self.id = id;
        self.init = (init || null);
        self.immutable = !!immutable;
        self.recursive = recursive;
    });

/**
 * @constructor
 */
Binding = defineNode(Declaration, 'Binding',
    ['pattern', 'value'],
    ['recursive'],
    function \loc, pattern, value, recursive =self-> {
        Node.call(self, loc);
        self.pattern = pattern;
        self.value = value;
        self.recursive = recursive;
    });

/**
 * @constructor
 */
StaticDeclaration = defineNode(Declaration, 'StaticDeclaration',
    ['declarations'],
    [],
    function \loc, declarations =self-> {
        Node.call(self, loc);
        self.declarations = declarations;
    });

/**
 * 
 */
StaticDeclarator =  defineNode(Declaration, 'StaticDeclarator',
    ['id', 'init'],
    [],
    function \loc, id, init =self-> {
        Node.call(self, loc);
        self.id = id;
        self.init = init;
    });

}