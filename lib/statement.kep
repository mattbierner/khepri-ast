/**
 * @fileOverview Khepri statement AST nodes.
 * SpiderMonkey Parser API.
 */
package (
    Statement,
    
    EmptyStatement,
    DebuggerStatement,
    WithStatement,
    BlockStatement,
    ExpressionStatement,
    IfStatement,
    BreakStatement,
    ContinueStatement,
    SwitchStatement,
    ReturnStatement,
    
    ThrowStatement,
    TryStatement,
    
    WhileStatement,
    DoWhileStatement,
    ForStatement)
with
    import 'khepri_ast/node' {defineNode, Node}
in {

/**
 * @constructor
 */
Statement = function() { };
Statement.prototype = new Node;

/**
 * @constructor
 */
EmptyStatement = defineNode(Statement, "EmptyStatement",
    [],
    [],
    function(loc) {
        Node.call(this, loc);
    });

/**
 * @constructor
 */
DebuggerStatement = defineNode(Statement, "DebuggerStatement",
    [],
    [],
    function(loc) {
        Node.call(this, loc);
    });

/**
 * @constructor
 */
BlockStatement = defineNode(Statement, "BlockStatement",
    ['body'],
    [],
    function(loc, body) {
        Node.call(this, loc);
        this.body = body;
    });

/**
 * @constructor
 */
ExpressionStatement =  defineNode(Statement, "ExpressionStatement",
    ['expression'],
    [],
    function(loc, expression) {
        Node.call(this, loc);
        this.expression = expression;
    });

/**
 * @constructor
 */
IfStatement = defineNode(Statement, "IfStatement",
    ['test', 'consequent', 'alternate'],
    [],
    function(loc, test, consequent, alternate) {
        Node.call(this, loc);
        this.test = test;
        this.consequent = consequent;
        this.alternate = (alternate || null);
    });

/**
 * @constructor
 */
WithStatement = defineNode(Statement, "WithStatement",
    ['bindings', 'body'],
    [],
    function(loc, bindings, body) {
        Node.call(this, loc);
        this.bindings = bindings;
        this.body = body;
    });

/**
 * @constructor
 */
BreakStatement = defineNode(Statement, "BreakStatement",
    [],
    [],
    function(loc) {
        Node.call(this, loc);
    });

/**
 * @constructor
 */
ContinueStatement = defineNode(Statement, "ContinueStatement",
    [],
    [],
    function(loc) {
        Node.call(this, loc);
    });

/**
 * @constructor
 */
SwitchStatement = defineNode(Statement, "SwitchStatement",
    ['discriminant', 'cases'],
    [],
    function(loc, discriminant, cases) {
        Node.call(this, loc);
        this.discriminant = discriminant;
        this.cases = cases;
    });

/**
 * @constructor
 */
ReturnStatement = defineNode(Statement, "ReturnStatement",
    ['argument'],
    [],
    function(loc, argument) {
        Node.call(this, loc);
        this.argument = (argument || null);
    });

/**
 * @constructor
 */
ThrowStatement = defineNode(Statement, "ThrowStatement",
    ['argument'],
    [],
    function(loc, argument) {
        Node.call(this, loc);
        this.argument = argument;
    });

/**
 * @constructor
 */
TryStatement = defineNode(Statement, "TryStatement",
    ['block', 'handler', 'finalizer'],
    [],
    function(loc, block, handler, finalizer) {
        Node.call(this, loc);
        this.block = block;
        this.handler = handler;
        this.finalizer = finalizer;
    });

/**
 * @constructor
 */
WhileStatement = defineNode(Statement, "WhileStatement",
    ['test', 'body'],
    [],
    function(loc, test, body) {
        Node.call(this, loc);
        this.test = test;
        this.body = body;
    });

/**
 * @constructor
 */
DoWhileStatement = defineNode(Statement, "DoWhileStatement",
    ['body', 'test'],
    [],
    function(loc, body, test) {
        Node.call(this, loc);
        this.test = test;
        this.body = body;
    });

/**
 * @constructor
 */
ForStatement = defineNode(Statement, "ForStatement",
    ['init', 'test', 'update', 'body'],
    [],
    function(loc, init, test, update, body) {
        Node.call(this, loc);
        this.init = (init || null);
        this.test = (test || null);
        this.update = (update || null);
        this.body = body;
    });

}