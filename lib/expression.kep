/**
 * @fileOverview Khepri expression AST nodes.
 */
package (
    Expression
    
    UnaryExpression
    BinaryExpression
    AssignmentExpression
    ConditionalExpression
    NewExpression
    CallExpression
    MemberExpression
    
    FunctionExpression
    ArrayExpression
    ObjectExpression
    
    LetExpression
    OperatorExpression
    
    CurryExpression,
    ApplyExpression)
with 
    import './node' {defineNode, Node}
in {

/* Base
 ******************************************************************************/
/**
 * @constructor
 */
Expression = function \ =self-> { };
Expression.prototype = new Node();

/* Instances
 ******************************************************************************/
/**
 * @constructor
 */
UnaryExpression = defineNode(Expression, 'UnaryExpression',
    ['operator', 'argument'],
    [],
    function \loc, operator, argument =self-> {
        Node.call(self, loc);
        self.operator = operator;
        self.argument = argument;
    });

/**
 * @constructor
 */
BinaryExpression = defineNode(Expression, 'BinaryExpression',
    ['operator', 'left', 'right'],
    [],
    function \loc operator, left, right =self-> {
        Node.call(self, loc);
        self.operator = operator;
        self.left = left;
        self.right = right;
    });

/**
 * @constructor
 */
AssignmentExpression = defineNode(Expression, 'AssignmentExpression',
    ['left', 'right'],
    ['immutable'],
    function \loc left right immutable =self-> {
        Node.call(self, loc);
        self.left = left;
        self.right = right;
        self.immutable = immutable;
    });

/**
 * @constructor
 */
ConditionalExpression = defineNode(Expression, 'ConditionalExpression',
    ['test', 'consequent', 'alternate'],
    [],
    function \loc, test, consequent, alternate =self-> {
        Node.call(self, loc);
        self.test = test;
        self.consequent = consequent;
        self.alternate = alternate;
    });

/**
 * @constructor
 */
NewExpression = defineNode(Expression, 'NewExpression',
    ['callee', 'args'],
    [],
    function \loc, callee, args =self-> {
        Node.call(self, loc);
        self.callee = callee;
        self.args = args;
    });

/**
 * @constructor
 */
CallExpression = defineNode(Expression, 'CallExpression',
    ['callee', 'args'],
    [],
    function \loc, callee, args =self-> {
        Node.call(self, loc);
        self.callee = callee;
        self.args = args;
    });

/**
 * @constructor
 */
MemberExpression = defineNode(Expression, 'MemberExpression',
    ['object', 'property'],
    ['computed', 'checked'],
    function \loc object property computed checked =self-> {
        Node.call(self, loc);
        self.object = object;
        self.property = property;
        self.computed = computed;
        self.checked = !!checked;
    });

/**
 * @constructor
 */
FunctionExpression = defineNode(Expression, 'FunctionExpression',
    ['id', 'params', 'body'],
    [],
    function \loc, id, params, body =self-> {
        Node.call(self, loc);
        self.id = (id || null);
        self.params = params;
        self.body = body;
    });

/**
 * @constructor
 */
ArrayExpression = defineNode(Expression, 'ArrayExpression',
    ['elements'],
    [],
    function \loc, elements =self-> {
        Node.call(self, loc);
        self.elements = elements;
    });

/**
 * @constructor
 */
ObjectExpression = defineNode(Expression, 'ObjectExpression',
    ['properties'],
    [],
    function \loc, properties =self-> {
        Node.call(self, loc);
        self.properties = properties;
    });

/**
 * @constructor
 */
LetExpression = defineNode(Expression, 'LetExpression',
    ['bindings', 'body'],
    [],
    function \loc, bindings, body =self-> {
        Node.call(self, loc);
        self.bindings = bindings;
        self.body = body;
    });

/**
 * @constructor
 */
OperatorExpression = defineNode(Node, 'OperatorExpression',
    ['operator'],
    ['flipped'],
    function \loc operator flipped =self-> {
        Node.call(self, loc);
        self.operator = operator;
        self.flipped = flipped;
    });

/**
 * @constructor
 */
CurryExpression = defineNode(Expression, 'CurryExpression',
    ['base', 'args'],
    [],
    function \loc, base, args =self-> {
        Node.call(self, loc);
        self.base = base;
        self.args = args;
    });

/**
 * @constructor
 */
ApplyExpression = defineNode(Expression, 'ApplyExpression',
    ['callee', 'arg'],
    [],
    function \loc, callee, arg =self-> {
        Node.call(self, loc);
        self.callee = callee;
        self.arg = arg;
    });

}