/**
 * @fileOverview Khepri expression AST nodes.
 */
package (
    Expression,
    
    ThisExpression,
    UnaryExpression,
    BinaryExpression,
    AssignmentExpression,
    LogicalExpression,
    ConditionalExpression,
    NewExpression,
    CallExpression,
    MemberExpression,
    
    FunctionExpression,
    ArrayExpression,
    ObjectExpression,
    
    LetExpression,
    
    CurryExpression,
    UnaryOperatorExpression,
    BinaryOperatorExpression,
    TernaryOperatorExpression)
with 
    import 'khepri_ast/node' {defineNode, Node}
in {

/* Base
 ******************************************************************************/
/**
 * @constructor
 */
Expression = function() { };
Expression.prototype = new Node;

/* Instances
 ******************************************************************************/
/**
 * @constructor
 */
ThisExpression = defineNode(Expression, 'ThisExpression',
    [],
    [],
    function(loc) {
        Node.call(this, loc);
    });

/**
 * @constructor
 */
UnaryExpression = defineNode(Expression, 'UnaryExpression',
    ['argument'],
    [],
    function(loc, operator, argument) {
        Node.call(this, loc);
        this.operator = operator;
        this.argument = argument;
    });

/**
 * @constructor
 */
BinaryExpression = defineNode(Expression, 'BinaryExpression',
    ['left', 'right'],
    [],
    function(loc, operator, left, right) {
        Node.call(this, loc);
        this.operator = operator;
        this.left = left;
        this.right = right;
    });

/**
 * @constructor
 */
AssignmentExpression = defineNode(Expression, 'AssignmentExpression',
    ['left', 'right'],
    ['operator'],
    function(loc, operator, left, right) {
        Node.call(this, loc);
        this.operator = operator;
        this.left = left;
        this.right = right;
    });

/**
 * @constructor
 */
LogicalExpression = defineNode(Expression, 'LogicalExpression',
    ['left', 'right'],
    ['operator'],
    function(loc, operator, left, right) {
        Node.call(this, loc);
        this.operator = operator;
        this.left = left;
        this.right = right;
    });

/**
 * @constructor
 */
ConditionalExpression = defineNode(Expression, 'ConditionalExpression',
    ['test', 'consequent', 'alternate'],
    [],
    function(loc, test, consequent, alternate) {
        Node.call(this, loc);
        this.test = test;
        this.consequent = consequent;
        this.alternate = alternate;
    });

/**
 * @constructor
 */
NewExpression = defineNode(Expression, 'NewExpression',
    ['callee', 'args'],
    [],
    function(loc, callee, args) {
        Node.call(this, loc);
        this.callee = callee;
        this.args = args;
    });

/**
 * @constructor
 */
CallExpression = defineNode(Expression, 'CallExpression',
    ['callee', 'args'],
    [],
    function(loc, callee, args) {
        Node.call(this, loc);
        this.callee = callee;
        this.args = args;
    });

/**
 * @constructor
 */
MemberExpression = defineNode(Expression, 'MemberExpression',
    ['object', 'property'],
    ['computed'],
    function(loc, object, property, computed) {
        Node.call(this, loc);
        this.object = object;
        this.property = property;
        this.computed = computed;
    });

/**
 * @constructor
 */
FunctionExpression = defineNode(Expression, 'FunctionExpression',
    ['id', 'params', 'body'],
    function(loc, id, params, body) {
        Node.call(this, loc);
        this.id = (id || null);
        this.params = params;
        this.body = body;
    });

/**
 * @constructor
 */
ArrayExpression = defineNode(Expression, 'ArrayExpression',
    ['elements'],
    [],
    function(loc, elements) {
        Node.call(this, loc);
        this.elements = elements;
    });

/**
 * @constructor
 */
ObjectExpression = defineNode(Expression, 'ObjectExpression',
    ['properties'],
    [],
    function(loc, properties) {
        Node.call(this, loc);
        this.properties = properties;
    });

/** 
 * @constructor
 */
LetExpression = defineNode(Expression, 'LetExpression',
    ['bindings', 'body'],
    [],
    function(loc, bindings, body) {
        Node.call(this, loc);
        this.bindings = bindings;
        this.body = body;
    });

/** 
 * @constructor
 */
CurryExpression = defineNode(Expression, 'CurryExpression',
    ['base', 'args'],
    [],
    function(loc, base, args) {
        Node.call(this, loc);
        this.base = base;
        this.args = args;
    });

/** 
 * @constructor
 */
UnaryOperatorExpression = defineNode(Expression, 'UnaryOperatorExpression',
    [],
    ['op'],
    function(loc, op) {
        Node.call(this, loc);
        this.op = op;
    });

/** 
 * @constructor
 */
BinaryOperatorExpression = defineNode(Expression, 'BinaryOperatorExpression',
    [],
    ['op'],
    function(loc, op) {
        Node.call(this, loc);
        this.op = op;
    });

/** 
 * @constructor
 */
TernaryOperatorExpression = defineNode(Expression, 'TernaryOperatorExpression',
     [],
    ['op'],
    function(loc, op) {
        Node.call(this, loc);
        this.op = op;
    });

}