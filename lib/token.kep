/**
 * @fileOverview Khepri lex tokens.
 */
package (
    Token
    
    StringToken
    NumberToken
    RegularExpressionToken
    BooleanToken
    NullToken
    
    IdentifierToken
    KeywordToken
    PunctuatorToken
    PrefixOperatorToken
    InfixOperatorToken
    
    CommentToken
    WhitespaceToken
    LineTerminatorToken)
with
    import './node' {defineNode, Node}
in {

/**
 * @constructor
 */
Token = function \loc value =self-> {
    Node.call(self, loc);
    self.value = value;
};
Token.prototype = new Node();

/* Instances
 ******************************************************************************/
/**
 * @constructor
 */
StringToken = defineNode(Token, 'String',
    [],
    ['value'],
    function \loc, value =self-> {
        Token.call(self, loc, value);
    });

/**
 * @constructor
 */
NumberToken = defineNode(Token, 'Number',
    [],
    ['value'],
    function \loc, value =self-> {
        Token.call(self, loc, value);
    });

/**
 * @constructor
 */
RegularExpressionToken = defineNode(Token, 'RegularExpression',
    [],
    ['value'],
    function \loc, value =self-> {
        Token.call(self, loc, value);
    });

/**
 * @constructor
 */
BooleanToken = defineNode(Token, 'Boolean',
    [],
    ['value'],
    function \loc, value =self-> {
        Token.call(self, loc, value);
    });

/**
 * @constructor
 */
NullToken = defineNode(Token, 'Null',
    [],
    ['value'],
    function \loc, value =self-> {
        Token.call(self, loc, value);
    });

/**
 * @constructor
 */
IdentifierToken = defineNode(Token, 'Identifier',
    [],
    ['value'],
    function \loc, value =self-> {
        Token.call(self, loc, value);
    });

/**
 * @constructor
 */
KeywordToken = defineNode(Token, 'Keyword',
    [],
    ['value'],
    function \loc, value =self-> {
        Token.call(self, loc, value);
    });

/**
 * @constructor
 */
PunctuatorToken = defineNode(Token, 'Punctuator',
    [],
    ['value'],
    function \loc, value =self-> {
        Token.call(self, loc, value);
    });

/**
 * @constructor
 */
PrefixOperatorToken = defineNode(Token, 'PrefixOperator',
    [],
    ['value', 'base'],
    function \loc value base =self-> {
        Token.call(self, loc, value);
        self.base = base;
    });

/**
 * @constructor
 */
InfixOperatorToken = defineNode(Token, 'InfixOperator',
    [],
    ['value', 'base'],
    function \loc value base =self-> {
        Token.call(self, loc, value);
        self.base = base;
    });

/**
 * @constructor
 */
CommentToken = defineNode(Token, 'Comment',
    [],
    ['value'],
    function \loc value =self-> {
        Token.call(self, loc, value);
    });

/**
 * @constructor
 */
WhitespaceToken = defineNode(Token, 'Whitespace',
    [],
    ['value'],
    function \loc, value =self-> {
        Token.call(self, loc, value);
    });

/**
 * @constructor
 */
LineTerminatorToken = defineNode(Token, 'LineTerminator',
    [],
    ['value'],
    function \loc, value =self-> {
        Token.call(self, loc, value);
    });

}