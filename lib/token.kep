/**
 * @fileOverview Khepri 5.1 lex tokens.
 */
package (
    Token,
    
    StringToken,
    NumberToken,
    RegularExpressionToken,
    BooleanToken,
    NullToken,
    
    IdentifierToken,
    KeywordToken,
    PunctuatorToken,
    
    CommentToken,
    WhitespaceToken,
    LineTerminatorToken)
with
    import 'khepri_ast/node' {defineNode, Node}
in {

/**
 * @constructor
 */
Token = function(loc, value) {
    Node.call(this, loc);
    this.value = value;
};
Token.prototype = new Node;

/* Instances
 ******************************************************************************/
/**
 * @constructor
 */
StringToken = defineNode(Token, 'String',
    [],
    ['value'],
    function(loc, value) {
        Token.call(this, loc, value);
    });

/**
 * @constructor
 */
NumberToken = defineNode(Token, 'Number',
    [],
    ['value'],
    function(loc, value) {
        Token.call(this, loc, value);
    });

/**
 * @constructor
 */
RegularExpressionToken = defineNode(Token, 'RegularExpression',
    [],
    ['value'],
    function(loc, value) {
        Token.call(this, loc, value);
    });

/**
 * @constructor
 */
BooleanToken = defineNode(Token, 'Boolean',
    [],
    ['value'],
    function(loc, value) {
        Token.call(this, loc, value);
    });

/**
 * @constructor
 */
NullToken = defineNode(Token, 'Null',
    [],
    ['value'],
    function(loc, value) {
        Token.call(this, loc, value);
    });

/**
 * 
 */
IdentifierToken = defineNode(Token, 'Identifier',
    [],
    ['value'],
    function(loc, value) {
        Token.call(this, loc, value);
    });

/**
 * @constructor
 */
KeywordToken = defineNode(Token, 'Keyword',
    [],
    ['value'],
    function(loc, value) {
        Token.call(this, loc, value);
    });

/**
 * 
 */
PunctuatorToken = defineNode(Token, 'Punctuator',
    [],
    ['value'],
    function(loc, value) {
        Token.call(this, loc, value);
    });

/**
 * @constructor
 */
CommentToken = defineNode(Token, 'Comment',
    [],
    ['value', 'multiline', 'linebreak'],
    function(loc, value, multiline, linebreak) {
        Token.call(this, loc, value);
        this.multiline = !!multiline;
        this.linebreak = !!linebreak;
    });

/**
 * @constructor
 */
WhitespaceToken = defineNode(Token, 'Whitespace',
    [],
    ['value'],
    function(loc, value) {
        Token.call(this, loc, value);
    });

/**
 * @constructor
 */
LineTerminatorToken = defineNode(Token, 'LineTerminator',
    [],
    ['value'],
    function(loc, value) {
        Token.call(this, loc, value);
    });
}